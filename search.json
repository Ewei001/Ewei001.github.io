[{"title":"关于List和Set问题","url":"http://yoursite.com/2017/08/20/The-efficiency-of-List-and-Set/","content":"<p>今天做了一个比较简单的题（LeetCode 349），写完后惯性地去了discuss看了下别人的分享，发现原本以为时间复杂度都是o(n)的算法，一个是o(n),一个是o(nlogn),两种方法具体如下可以看我<a href=\"https://github.com/Ewei001/myLeetCode/blob/master/349.IntersectionOfTwoArrays.txt\" target=\"_blank\" rel=\"external\">提交在GitHub上的代码</a>。</p>\n<p>如果说第二种方法因为Array.sort()方法时间复杂度为o(nlogn), 那第一种方法在for循环中调用set.contains()查询是不应该是o(n^2)吗，答案当然是否定的~<br>说一下个人理解：<br>HashSet中使用的是哈希表查找，通过hashcode方法可以直接映射到存储的位置，因此搜索方法时间复杂度是o(1)<br>而List需要遍历逐个比对值是否相同，因此效率要低一些。</p>\n<p>借此机会回顾一下List与Set：<br>首先List与Set都是Collection的子类接口。List接口的子类集合是有序集合，可以根据下标对集合元素进行操作，可以存在相同的元素。而Set接口的子类集合是无序的，且不允许存在相同的元素。</p>\n<h3 id=\"List接口下有三个子类，分别是ArrayList、LinkedList、Vector\"><a href=\"#List接口下有三个子类，分别是ArrayList、LinkedList、Vector\" class=\"headerlink\" title=\"List接口下有三个子类，分别是ArrayList、LinkedList、Vector\"></a>List接口下有三个子类，分别是ArrayList、LinkedList、Vector</h3><h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h4><p>ArrayList底层是数组结构，所以如果数据较大查询的效率较高，但也正因如此，他每次添加或者删除元素，都要移动很多元素，相当于重建了一个数组，所以如果集合中频繁有增删操作，建议使用LinkedList。当然也不排除特殊情况，比如每次remove的都是最后一个元素，这种情况就应当使用ArrayList，因为这时LinkedList的查询效率很低。<br>线程不同步。方法基本都继承自List。</p>\n<h4 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h4><p>LinkedList底层是链表结构，每一个元素都是跟自己前一个和后一个元素发生关系，所以他的增删操作只需要改变与其位置相关联的两个元素关系即可，所以效率比较高，但是如果通过下标查询的话就要从0开始计算，所以如果集合中频繁有查询操作，建议使用ArrayList。<br>线程不同步。因为底层结构的不同，所以LinkedList有自己的特有方法来增加效率（具体方法请自行查询）。</p>\n<h4 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h4><p>Vector同ArrayList，底层都是数组结构，但是不同的是Vector是线程同步的，在一般情况下会大大降低效率。所以使用较少。但是Vector特有的取出方式枚举需要说一下。在IO流中的合并流SequenceInputStream中会用到。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vector vec = new Vector();</div><div class=\"line\">Enumeration e = vec.elements();</div><div class=\"line\">while(e.hasMoreElements())&#123;</div><div class=\"line\">    System.out.println(e.nextElements());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Set接口下的子类有HashSet和TreeSet。\"><a href=\"#Set接口下的子类有HashSet和TreeSet。\" class=\"headerlink\" title=\"Set接口下的子类有HashSet和TreeSet。\"></a>Set接口下的子类有HashSet和TreeSet。</h3><h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h4><p>HashSet的底层结构是哈希表（实际上是一个HashMap实例）。HashSet集合是通过元素中继承自Object超类的hashCode()方法和equal()方法来判断两个对象是否相同的。通过hashCode方法可以避免每次添加都需要equals的繁琐过程。所以我们在自己定义对象的时候，可以覆写对象继承自Object的这两个方法，使他们按照我们的意志来判断两个元素是否是同一元素。<br>HashSet是根据哈希值的范围来提高查找效率，如果对象的属性参与hashCode计算，就要谨慎去修改。因为如果修改了该属性，该对象的哈希值就会改变，以后要删除该对象的时候，该对象在HashSet中的索引与现在的哈希值不匹配，就会找不到该元素，他的声明周期会随着HashSet的结束而结束，造成内存泄露。<br>这里可以看<a href=\"http://blog.csdn.net/wuqingyidongren/article/details/51556282\" target=\"_blank\" rel=\"external\">另一篇博客</a></p>\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h4><p>TreeSet集合的底层是二叉树数据结构。他不仅不允许相同元素存在，更可以帮我们排序。我们将元素存入TreeSet集合之后他是按照自然顺序排序的。而我们要想让元素按照我们的意志进行排序，让元素实现Comparable接口，然后实现里面的CompareTo方法，返回0则代表元素相同，否则根据正数或者负数来判断排列顺序。</p>\n","categories":[],"tags":["Java"]},{"title":"《Effctive Java》读书笔记（一）","url":"http://yoursite.com/2017/08/02/Effctive-Java-Reading-notes/","content":"<h2 id=\"引导语\"><a href=\"#引导语\" class=\"headerlink\" title=\"引导语\"></a>引导语</h2><p>本书大部分内容都不是讨论性能的，而是关心如何编写出清晰、正确、可用、健壮、灵活和可维护的程序来。如果你能做到这一点，那么想要获得所需要的性能往往就相对比较简单了。</p>\n<h2 id=\"第1条-考虑用静态工厂方法代替构造器\"><a href=\"#第1条-考虑用静态工厂方法代替构造器\" class=\"headerlink\" title=\"第1条 考虑用静态工厂方法代替构造器\"></a>第1条 考虑用静态工厂方法代替构造器</h2><h2 id=\"第2条-遇到多个构造器参数时要考虑用构建器\"><a href=\"#第2条-遇到多个构造器参数时要考虑用构建器\" class=\"headerlink\" title=\"第2条 遇到多个构造器参数时要考虑用构建器\"></a>第2条 遇到多个构造器参数时要考虑用构建器</h2><p>静态工厂和构造器有个共同的局限性：他们都不能扩展到大量的可选参数。举个书中的例子：<br>考虑用一个类表示包装食品外面显示的营养成分标签。这些标签中有几个域是必须的：每份的含量、每份的卡路里，还有超过20个可选域：总脂肪量、饱和脂肪量、转化脂肪、胆固醇等等。大多数产品在可选域中都会有非零值。<br>对于这样的类，程序员一向习惯采用重叠构造器模式，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NutritionFacts</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> calories;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fat;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sodium;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> carbohydrate;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> calories)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>(servingSize, calories, <span class=\"number\">0</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> calories, <span class=\"keyword\">int</span> fat)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>(servingSize, calories, <span class=\"number\">0</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> calories, <span class=\"keyword\">int</span> fat, <span class=\"keyword\">int</span> sodium)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>(servingSize, calories, <span class=\"number\">0</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> calories, <span class=\"keyword\">int</span> fat, <span class=\"keyword\">int</span> sodium, <span class=\"keyword\">int</span> carbohydrate)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.servingSize = servingSize;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.calories = calories;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.fat = fat;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.sodium = sodium;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.carbohydrate = carbohydrate;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当你想要创建实例的时候，就利用参数列表最短的构造器，但该列表中包含了要设置的所有参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NutritionFacts cocaCola = new NutritionFacts(240, 8, 100, 25, 28);</div></pre></td></tr></table></figure></p>\n<p>这个构造器调用通常需要很多你本不想设置的参数，但还是不得不为他们传递值。如果仅仅是这5个参数，看起来还不算太糟，问题是随着参数数目的增加，它很快就会失去控制。<br>重叠构造器模式可行，但是当有许多参数的时候，客户端代码会很难编写，并且较难阅读。<br>第二种替代方法：JavaBeans模式，虽然弥补了重叠构造器模式的不足，有较好的可读性，但是自身也有很严重的缺点，在此不多花文字描述，想了解可自行搜索。<br>第三种，Builder模式，既能保证像重叠构造器那样的安全性，也能保证像JavaBean那么好的可读性。<br>Builder模式不直接生成想要的对象，而是让客户端利用所有必要的参数调用构造器（或者静态工厂），得到一个builder对象，然后客户端在builder对象上调用类似于setter的方法，来设置每个相关的可选参数。<br>最后，客户端调用无参的build方法来生成不可变的对象。这个builder是它构建的类的静态成员类，示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NutritionFacts</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> calories;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fat;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sodium;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> carbohydrate;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//required parameters</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> calories;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//Optional parameters, initialized to default values</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fat = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sodium = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> carbohydrate = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">fat</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</div><div class=\"line\">\t\t\tfat = val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">sodium</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</div><div class=\"line\">\t\t\tfat = val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">carbohydrate</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</div><div class=\"line\">\t\t\tcarbohydrate = val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> NutritionFacts <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NutritionFacts(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(Builder builder)</span></span>&#123;</div><div class=\"line\">\t\tservingSize = builder.servingSize;</div><div class=\"line\">\t\tcalories = builder.calories;</div><div class=\"line\">\t\tfat = builder.fat;</div><div class=\"line\">\t\tsodium = builder.sodium;</div><div class=\"line\">\t\tcarbohydrate = builder.carbohydrate;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意NutritionFacts是不可变的，所有的默认参数值都单独放在一个地方，builder的setter方法返回builder本身，以便把调用链连起来：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NutritionFacts cocaCola = <span class=\"keyword\">new</span> NutritionFacts.builder(<span class=\"number\">240</span>, <span class=\"number\">8</span>).calories(<span class=\"number\">100</span>).sodium(<span class=\"number\">20</span>).carbohydrate(<span class=\"number\">30</span>).build();</div></pre></td></tr></table></figure></p>\n<p>与构造器相比，builder的略微优势在于，builder可以有多个可变参数。构造器就像方法一样，只能有一个可变参数。因为builder利用单独的方法来设置每个参数，你想要多少个可变参数，它们就可以有多少个，知道每个方法都有一个可变参数。<br>Builder模式十分灵活，可以利用单个builder构建多个对象，builder的参数可以在创建对象期间进行调整，也可以随着不同的对象而改变。builder可以自动填充某些域，例如每次创建对象时自动增加序列号。<br>简而言之，如果类的构造器或者静态工厂中具有多个参数，设计这种类时，Builder模式就是中不错的选择，特别当大多数参数都是可选的时候。</p>\n<h2 id=\"第5条-避免创建不必要的对象\"><a href=\"#第5条-避免创建不必要的对象\" class=\"headerlink\" title=\"第5条 避免创建不必要的对象\"></a>第5条 避免创建不必要的对象</h2><p>一般来说，最好能重用对象而不是在每次需要的时候创建一个相同功能的新对象。重用方式既快速又流行。如果对象是不可变的，它就始终可以被重用。<br>书中举了String的例子。（String类被定义为final的，Java程序中的所有字面值，即双引号括起来的字符串，如“abc”，都是作为String类的实例实现的。String是常量，其对象一旦构造就不能再改变，每一个看起来会修改String值的方法，实际上都是创造了一个全新的String对象，以包含修改后的字符串内容。）<br>除了重用不可变对象外，也可以重用哪些已知不会被修改的可变对象。下面是一个比较微妙、也比较常见的反面例子，其中涉及可变的Date对象，它们的值一旦计算出来后就不再变化。<br>该类建立了一个模型：其中有一个人，并且有一个isBabyBoomer方法，用来检验这个人是否为一个“baby boomer（生育高峰期出生的小孩）”：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Date birthDate;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBabyBoomer</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tCalendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(<span class=\"string\">\"GMT\"</span>));</div><div class=\"line\">\t\tgmtCal.set(<span class=\"number\">1946</span>, Calendar.JANUARY, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\tDate boomStart = gmtCal.getTime();</div><div class=\"line\">\t\tgmtCal.set(<span class=\"number\">1965</span>, Calendar.JANUARY, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\tDate boomEnd = gmtCal.getTime();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> birthDate.compareTo(boomStart) &gt;= <span class=\"number\">0</span> &amp;&amp; birthDate.compareTo(boomEnd) &lt; <span class=\"number\">0</span>; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>isBabyBoomer()每次调用时，都会新建一个Calendar、一个TimeZone和两个Date实例，这不是必要的。下面版本用了一个静态初始化器，避免这种效率低下的情况。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Date birthDate;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Date BOOM_START;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Date BOOM_END;</div><div class=\"line\">\t<span class=\"keyword\">static</span>&#123;</div><div class=\"line\">\t\tCalendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(<span class=\"string\">\"GMT\"</span>));</div><div class=\"line\">\t\tgmtCal.set(<span class=\"number\">1946</span>, Calendar.JANUARY, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\tBOOM_START = gmtCal.getTime();</div><div class=\"line\">\t\tgmtCal.set(<span class=\"number\">1965</span>, Calendar.JANUARY, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\tBOOM_END = gmtCal.getTime();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBabyBoomer</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> birthDate.compareTo(boomStart) &gt;= <span class=\"number\">0</span> &amp;&amp; birthDate.compareTo(boomEnd) &lt; <span class=\"number\">0</span>; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>改进后的Person类只在初始化的时候创建Calendar、一个TimeZone和两个Date实例一次，而不是在每次调用isBabyBoomer()的时候都创建这些实例。如果isBabyBoomer方法被频繁调用，这种方法将会显著地提高性能。<br>如果改进后的Person类被初始化，但它的isBabyBoomer()方法永远不会被调用，那就没有必要初始化BOOM_START，BOOM_END域，通过延迟初始化，即把对这些域的初始化延迟到isBabyBoom第一次调用的时候进行，则有可能消除这些不必要的初始化工作，但是不建议这样做，这样做会使方法的实现更加复杂，从而无法将性能提高到超过已经达到的水平。</p>\n","categories":[],"tags":["Java"]},{"title":"用户数据安全性","url":"http://yoursite.com/2017/07/28/User-data-security/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在网上看了一个牛客的教程，其中有一讲是讲用户数据安全性，感觉蛮实用的，在此做一下笔记。<br>那么有哪些可以增强用户数据安全性的措施呢，列出以下几种：</p>\n<h2 id=\"1-HTTPS注册页\"><a href=\"#1-HTTPS注册页\" class=\"headerlink\" title=\"1.HTTPS注册页\"></a>1.HTTPS注册页</h2><p>网页的访问中，http是明文的，而https是加密过的，但后台加密需要运算会加重服务器的压力，<br>因此早期的网站登录注册的页面使用https，其它页面用http。不过目前很多网站全栈使用https,这样也可以防止一些运行商拦截注入广告等操作。</p>\n<h2 id=\"2-公钥加密私钥解密\"><a href=\"#2-公钥加密私钥解密\" class=\"headerlink\" title=\"2.公钥加密私钥解密\"></a>2.公钥加密私钥解密</h2><p>如果想纯粹地加密数据<br>当用户在打开以个页面时，服务器会下发一个公钥。当填写一个密码时，会使用这个公钥和密码进行加密再提交到服务器，服务器拥有私钥因此可以进行解密。即便是信息是被他人监听了也无法解密，因为别人不知道你的私钥。服务器解密之后便可进行接下来的操作流程。<br>公钥私钥加密是当前非常安全的一个方法，目前支付宝h5页面支付密码加密就是使用的公钥私钥，只有支付宝后台自己知道私钥，其他人无法解出，因此安全等级非常高。</p>\n<h2 id=\"3-用户密码salt防止破解\"><a href=\"#3-用户密码salt防止破解\" class=\"headerlink\" title=\"3.用户密码salt防止破解\"></a>3.用户密码salt防止破解</h2><p>即密码层面加强<br>目前一些常用的加密算法，比如MD5，如果只是将纯粹的MD5加密后的字符串保存到服务器是有很大的风险的，因为有很多网站是可以破解MD5加密字符串的。因此需要通过后台给密码加上一些额外的字段，并且这些额外的字段是随机生成的，然后再通过加密算法进行加密。<br>可以将UUID取一部分作为salt</p>\n<h2 id=\"4-token有效期\"><a href=\"#4-token有效期\" class=\"headerlink\" title=\"4.token有效期\"></a>4.token有效期</h2><p>保证token不被别人一直占用<br>后台生成一个关联user的token然后下发给客户端存到本地<br>token可以使sessionid,或者是cookie里的一个key</p>\n<h2 id=\"5-单一平台的单点登录，登录IP异常检验\"><a href=\"#5-单一平台的单点登录，登录IP异常检验\" class=\"headerlink\" title=\"5.单一平台的单点登录，登录IP异常检验\"></a>5.单一平台的单点登录，登录IP异常检验</h2><p>首先说一下什么是单点登录，例如你在宿舍登陆了自己的账号，一会去了机房又去登录这个账号时，就会把宿舍的那个token给失效掉。<br>单点登录配上IP异常检验，比如你在宿舍登录了，另一个人在新加坡登陆导致你这边掉线了，可能你一下子并没有反应过来以为是网的问题，等你再次登录时，系统给出提示说你上一次在新加坡登录的，于是你很快意识到自己的密码可能泄露了，一般的用户就会立马改掉密码。</p>\n<h2 id=\"用户状态的权限判断\"><a href=\"#用户状态的权限判断\" class=\"headerlink\" title=\"用户状态的权限判断\"></a>用户状态的权限判断</h2><p>可以使用拦截器进行处理</p>\n<h2 id=\"7-添加验证码机制，防止爆破和批量注册\"><a href=\"#7-添加验证码机制，防止爆破和批量注册\" class=\"headerlink\" title=\"7.添加验证码机制，防止爆破和批量注册\"></a>7.添加验证码机制，防止爆破和批量注册</h2><p>防止一些黑客写一些恶意的代码疯狂地注册、校验密码。<br>忘记密码后校验手机验证码一般为四位到六位，比如我现在写了一份代码，可以一瞬间发起一万个请求，这一万个请求把0-9999所有可能的验证码都发到服务器上，你的服务器收到这些请求后总有一个是对的上的，这样就很不安全了。<br>这种情况下服务器就需要做校验，如果有一次验证码验证失效，token就必须重发，且两次不可以一样，，机制与登录注册是一样的。一旦出现错误就给出一些惩罚措施，比如该IP不能继续注册等等。</p>\n","categories":[],"tags":[]},{"title":"learning play framework","url":"http://yoursite.com/2017/07/08/learning-play-framework/","content":"<h2 id=\"play-framework-简介\"><a href=\"#play-framework-简介\" class=\"headerlink\" title=\"play framework 简介\"></a>play framework 简介</h2><p>play框架颠覆了臃肿的企业级JavaEE规范，以Restful为目标并专注于开发效率，是Java敏捷开发的最佳参考方案。<br>开发者只要具备Java以及数据库的相关基础知识就可以轻松上手，从而让web应用开发变得更加容易，提高项目催化速度。<br>作为full stack的Java web应用框架，play框架包括了所有开发中涉及的领域：NIO应用容器，无状态MVC模型，Hibernate数据持久化，Groovy模板引擎，<br>以及建立web应用所需要的各种工具类。需要注意的是，这里虽然使用了Groovy，但只是将其作为页面模板语言，<br>和Freemaker，velocity使用自己定义的语言是同样的道理。Groovy的成熟以及它和Java的相似性决定了采用Groovy远远好于定义自己的模板语言。</p>\n<p>（无状态：一般指的是服务器端不保留任何操作和事务的状态，也不存在类似回滚的操作）</p>\n<h2 id=\"play-特性总结\"><a href=\"#play-特性总结\" class=\"headerlink\" title=\"play 特性总结\"></a>play 特性总结</h2><p>自动编译和重载：当编辑Java文件并保存后，刷新浏览器就能立即查看结果。使用Play开发不需要手动编译、部署以及重新启动Web服务器等操作。<br>1.无状态模型：Play是真正的无共享框架，为REST而准备。它可以将同一个应用的多个实例分别部署在多台服务器上，因而扩展性非常强。<br>2.高效的模板引擎：基于表达式语言Groovy的清晰模板引擎，提供了模板的继承、导入以及标签自定义等功能。<br>3.快速解决错误：当错误发生时，Play会在浏览器中显示出错代码块并提示问题发生的确切位置。<br>4.Full Stack:提供创建Web应用所需的全部功能，集成了Hibernate、OpenID、Memcached等第三方类库。<br>5.纯Java：Play采用Java编写代码，可以方便地使用任何Java类库，并且能够非常好地和Eclipse、Netbeans等IDE集成，只需通过命令生成匹配的项目文件即可。<br>6.基于非阻塞的IO模型：允许创建基于长轮询和WebSocket的主流Web应用。<br>7.有趣并且高效：省去了Java应用重启的时间，提高了应用的开发效率。</p>\n<h2 id=\"play项目的目录结构\"><a href=\"#play项目的目录结构\" class=\"headerlink\" title=\"play项目的目录结构\"></a>play项目的目录结构</h2><p>app/: 包含了应用的核心部分，默认分为modelS,controllers,views三个子目录，当然也能够包含其他的Java包。<br>conf/: 包含了应用的所有配置文件，特别是主配置文件application.conf,d;定义路由规则的配置文件routes和用于国际化配置的文件messages。<br>lib/: 包含了所有可选的标准Java类库<br>public/: 包含了所有公用资源，主要有javascripts，stylesheets和images三个子目录。<br>test/: 包含了所有的应用测试，框架集成了JUnit和Selenium测试工具。</p>\n<p>ps:play框架使用utf-8作为其唯一的编码。<br>ps:play中所有的Action方法都必须定义为public static void。因为控制器从来不会被实例化。标识public是为了授权框架在URL响应时调用Action方法，并且返回结果总是void。</p>\n","categories":[],"tags":["JavaEE"]},{"title":"vue learning notes","url":"http://yoursite.com/2017/05/24/vue-learning-notes/","content":"<h2 id=\"vue是什么\"><a href=\"#vue是什么\" class=\"headerlink\" title=\"vue是什么\"></a>vue是什么</h2><p>  构建用户界面的渐进式框架<br>  只关注视图层</p>\n<h2 id=\"vue的两个核心点\"><a href=\"#vue的两个核心点\" class=\"headerlink\" title=\"vue的两个核心点\"></a>vue的两个核心点</h2><p>  响应的数据绑定<br>  组合的视图组件</p>\n<h2 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h2><p>  运行js的速度是很快的，但是大量地操作DOM就会很慢。时常在更新数据后会重新渲染页面，这样就会造成在没有改变数据的地方重新渲染了DOM节点，这样就会造成很大程度上的资源浪费。<br>  使用虚拟DOM（利用在内存中生成与真实DOM与之对应的数据结构），当数据发生变化时，能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。</p>\n<h2 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h2><p>  M: Model 数据模型<br>  V: view 视图模板<br>  vm: view-Model 视图模型（完成数据绑定以及监听事件等工作）</p>\n<h2 id=\"vue实例\"><a href=\"#vue实例\" class=\"headerlink\" title=\"vue实例\"></a>vue实例</h2><p>  每一个应用都是通过vue这个构造函数创建根实例启动new Vue(选项对象)<br>  需传入选项对象，对象包含挂载元素，数据，模板，方法等。<br>     el: 挂载元素选择器<br>     data: 代理数据<br>     methods: 定义方法</p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><p>  利用props绑定动态数据：简单来说，就是让子组件的某个插值，和父组件的数据保持一致。<br>  例：<add v-bind:子组件的值=\"父组件的属性\"></add><br>  不加v-bind的，传递的是字面量，即当做字符串（例如1也是字符串，而不是number类型）；<br>  加上v-bind的，传递的是JS表达式（因此才能传递父组件的值）；<br>  加上v-bind后，如果能找到父组件的值，那么使用父组件的值；如果没有对应的，则将其看做一个js表达式（例如1+2看做3，{a:1}看做是一个对象）<br>  props的绑定类型分为两种类型，即单向绑定（父组件能影响子组件，但相反不行）和双向绑定（子组件也能影响父组件）；<br>  单向绑定：（默认，或使用.once）当父组件的值被更改后，子组件的值也随之更改；当子组件的值被更改后，父组件的值不会变化<br>  双向绑定：（需要使用“.sync”作为修饰词）无论修改父组件还是子组件的值，另外一个都会随之变动</p>\n","categories":[],"tags":["web"]},{"title":"python learning notes","url":"http://yoursite.com/2017/05/05/python-learning-notes/","content":"<h1 id=\"python基础语法\"><a href=\"#python基础语法\" class=\"headerlink\" title=\"python基础语法\"></a>python基础语法</h1><h2 id=\"python标识符\"><a href=\"#python标识符\" class=\"headerlink\" title=\"python标识符\"></a>python标识符</h2><ul>\n<li>python中的标识符由字母(且区分大小写)、数字、下划线组成，但不能以数字开头。这一点和Java有点像，但是Java中还可以使用“$”。</li>\n<li>以下划线开头的标识符是有特殊意义的。以单下划线开头_foo的代表不能直接访问的类属性，需要类提供的接口进行访问，不能用from XXX import * 导入。</li>\n<li>以双下划线开头的__foo代表类的私有成员；以双下划线结尾的__foo__代表python里特殊方法专用的标识，如__init__()代表类的构造函数。<br>(本来个人理解“<em>”开头的标识符类似于Java中的私有变量，但是看到”\\</em>_“后就有些凌乱了……具体区别参考<a href=\"http://www.cnblogs.com/coder2012/p/4423356.html\" target=\"_blank\" rel=\"external\">python _、__和__xx__的区别</a>)</li>\n</ul>\n<h2 id=\"python保留字符\"><a href=\"#python保留字符\" class=\"headerlink\" title=\"python保留字符\"></a>python保留字符</h2><p>以下为python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。<br>所有 Python 的关键字只包含小写字母。<br>and        /    exec      /    not      / assert    /    finally     /     or<br>break    /   for      /        pass  /  class     /   from      /    print<br>continue    /  global     /   raise  /  def        /    if          /    return<br>del    /     import      /    try  /  elif     /    in          /    while<br>else    /    is          /    with  /  except     /   lambda      /    yield</p>\n<h2 id=\"行和缩进\"><a href=\"#行和缩进\" class=\"headerlink\" title=\"行和缩进\"></a>行和缩进</h2><p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量。</p>\n<h2 id=\"多行语句\"><a href=\"#多行语句\" class=\"headerlink\" title=\"多行语句\"></a>多行语句</h2><p>Python语句中一般以新行作为为语句的结束符。<br>但是我们可以使用斜杠（ \\）将一行的语句分为多行显示。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">total = item_one + \\</div><div class=\"line\">        item_two + \\</div><div class=\"line\">        item_three</div></pre></td></tr></table></figure></p>\n<p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">days = [&apos;Monday&apos;, &apos;Tuesday&apos;, &apos;Wednesday&apos;,</div><div class=\"line\">        &apos;Thursday&apos;, &apos;Friday&apos;]</div></pre></td></tr></table></figure></p>\n<h2 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h2><p>Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。<br>其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">word = &apos;word&apos;</div><div class=\"line\">sentence = &quot;这是一个句子。&quot;</div><div class=\"line\">paragraph = &quot;&quot;&quot;这是一个段落。</div><div class=\"line\">包含了多个语句&quot;&quot;&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"python注释\"><a href=\"#python注释\" class=\"headerlink\" title=\"python注释\"></a>python注释</h2><p>python中单行注释采用#开头。<br>注释可以在语句或表达式行末：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &quot;Eva&quot; # 这是一个注释</div></pre></td></tr></table></figure></p>\n<p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p>\n<h2 id=\"python空行\"><a href=\"#python空行\" class=\"headerlink\" title=\"python空行\"></a>python空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br>ps: 空行也是程序代码的一部分。</p>\n<h2 id=\"同一行显示多条语句\"><a href=\"#同一行显示多条语句\" class=\"headerlink\" title=\"同一行显示多条语句\"></a>同一行显示多条语句</h2><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割<br>为了使程序代码有良好的可读性，个人不建议一行写多条语句。</p>\n<h2 id=\"print输出\"><a href=\"#print输出\" class=\"headerlink\" title=\"print输出\"></a>print输出</h2><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=&quot;a&quot;</div><div class=\"line\">y=&quot;b&quot;</div><div class=\"line\"># 换行输出</div><div class=\"line\">print x</div><div class=\"line\">print y</div><div class=\"line\"># 不换行输出</div><div class=\"line\">print x,</div><div class=\"line\">print y,</div></pre></td></tr></table></figure></p>\n<h2 id=\"多个语句构成代码组\"><a href=\"#多个语句构成代码组\" class=\"headerlink\" title=\"多个语句构成代码组\"></a>多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。<br>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if expression : </div><div class=\"line\">   suite </div><div class=\"line\">elif expression :  </div><div class=\"line\">   suite  </div><div class=\"line\">else :  </div><div class=\"line\">   suite</div></pre></td></tr></table></figure></p>\n","categories":["python"],"tags":["python"]},{"title":"关于pip安装依赖包问题","url":"http://yoursite.com/2017/05/03/关于pip安装依赖包问题/","content":"<p>公司最近在开发一个Python项目，<br>当我在配置开发环境，使用pip安装依赖包时，出现了以下问题：<br><img src=\"/images/problem.jpg\" alt=\"problem\"></p>\n<p>试了很多遍，一直以为是网络的问题，因为Python之前有安装过，也可以使用<br>在命令行试了一下Python，可以识别<br>但是pip却识别不了<br>原因：计算机可能不知道pip装在哪里<br>因为之前我的Python默认安装路径很多都是隐藏的，找起来很麻烦<br>干脆就卸载了重新装了一下<br>然后再配一下两个环境变量：<br>F:\\program files\\python<br>F:\\program files\\python\\Scripts<br>注意：scripts下是pip的路径，这个我是在安装Python时一起安装的，如果之前没有装，就需要先装一下再配环境。<br>然后再命令行试pip<br><img src=\"/images/solved.jpg\" alt=\"solved\"><br>应该就是成功了，下面就可以安装自己需要的依赖包了~</p>\n","categories":["python"],"tags":["python"]},{"title":"关于var","url":"http://yoursite.com/2017/04/25/关于var/","content":"<h2 id=\"最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：\"><a href=\"#最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：\" class=\"headerlink\" title=\"最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：\"></a>最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">\t<span class=\"keyword\">var</span> global = <span class=\"string\">'world'</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。\"><a href=\"#两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。\" class=\"headerlink\" title=\"两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。\"></a>两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。</h2><h2 id=\"如果把后面两行去掉：\"><a href=\"#如果把后面两行去掉：\" class=\"headerlink\" title=\"如果把后面两行去掉：\"></a>如果把后面两行去掉：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"这样子打印出来就是hello，那肯定是和后定义的变量有关系了。\"><a href=\"#这样子打印出来就是hello，那肯定是和后定义的变量有关系了。\" class=\"headerlink\" title=\"这样子打印出来就是hello，那肯定是和后定义的变量有关系了。\"></a>这样子打印出来就是hello，那肯定是和后定义的变量有关系了。</h2><h2 id=\"果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：\"><a href=\"#果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：\" class=\"headerlink\" title=\"果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：\"></a>果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> global;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">\tglobal = <span class=\"string\">'world'</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的\"><a href=\"#那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的\" class=\"headerlink\" title=\"那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的\"></a>那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的</h2><h2 id=\"在函数内可以通过window-global调用全局变量，\"><a href=\"#在函数内可以通过window-global调用全局变量，\" class=\"headerlink\" title=\"在函数内可以通过window.global调用全局变量，\"></a>在函数内可以通过window.global调用全局变量，</h2><h2 id=\"另外function内的this也是指向window实例，也可以吧引用写成this-global\"><a href=\"#另外function内的this也是指向window实例，也可以吧引用写成this-global\" class=\"headerlink\" title=\"另外function内的this也是指向window实例，也可以吧引用写成this.global\"></a>另外function内的this也是指向window实例，也可以吧引用写成this.global</h2><h2 id=\"当然最好还是尽量避免同名变量的出现，减少出错的概率。\"><a href=\"#当然最好还是尽量避免同名变量的出现，减少出错的概率。\" class=\"headerlink\" title=\"当然最好还是尽量避免同名变量的出现，减少出错的概率。\"></a>当然最好还是尽量避免同名变量的出现，减少出错的概率。</h2>","categories":["JS"],"tags":["Javascript"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]