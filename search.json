[{"title":"vue learning notes","url":"http://yoursite.com/2017/05/24/vue-learning-notes/","content":"<h2 id=\"vue是什么\"><a href=\"#vue是什么\" class=\"headerlink\" title=\"vue是什么\"></a>vue是什么</h2><p>  构建用户界面的渐进式框架<br>  只关注视图层</p>\n<h2 id=\"vue的两个核心点\"><a href=\"#vue的两个核心点\" class=\"headerlink\" title=\"vue的两个核心点\"></a>vue的两个核心点</h2><p>  响应的数据绑定<br>  组合的视图组件</p>\n<h2 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h2><p>  运行js的速度是很快的，但是大量地操作DOM就会很慢。时常在更新数据后会重新渲染页面，这样就会造成在没有改变数据的地方重新渲染了DOM节点，这样就会造成很大程度上的资源浪费。<br>  使用虚拟DOM（利用在内存中生成与真实DOM与之对应的数据结构），当数据发生变化时，能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。</p>\n<h2 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h2><p>  M: Model 数据模型<br>  V: view 视图模板<br>  vm: view-Model 视图模型（完成数据绑定以及监听事件等工作）</p>\n<h2 id=\"vue实例\"><a href=\"#vue实例\" class=\"headerlink\" title=\"vue实例\"></a>vue实例</h2><p>  每一个应用都是通过vue这个构造函数创建根实例启动new Vue(选项对象)<br>  需传入选项对象，对象包含挂载元素，数据，模板，方法等。<br>     el: 挂载元素选择器<br>     data: 代理数据<br>     methods: 定义方法</p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><p>  利用props绑定动态数据：简单来说，就是让子组件的某个插值，和父组件的数据保持一致。<br>  例：<add v-bind:子组件的值=\"父组件的属性\"></add><br>  不加v-bind的，传递的是字面量，即当做字符串（例如1也是字符串，而不是number类型）；<br>  加上v-bind的，传递的是JS表达式（因此才能传递父组件的值）；<br>  加上v-bind后，如果能找到父组件的值，那么使用父组件的值；如果没有对应的，则将其看做一个js表达式（例如1+2看做3，{a:1}看做是一个对象）<br>  props的绑定类型分为两种类型，即单向绑定（父组件能影响子组件，但相反不行）和双向绑定（子组件也能影响父组件）；<br>  单向绑定：（默认，或使用.once）当父组件的值被更改后，子组件的值也随之更改；当子组件的值被更改后，父组件的值不会变化<br>  双向绑定：（需要使用“.sync”作为修饰词）无论修改父组件还是子组件的值，另外一个都会随之变动</p>\n","categories":[],"tags":["web"]},{"title":"python learning notes","url":"http://yoursite.com/2017/05/05/python-learning-notes/","content":"<h1 id=\"python基础语法\"><a href=\"#python基础语法\" class=\"headerlink\" title=\"python基础语法\"></a>python基础语法</h1><h2 id=\"python标识符\"><a href=\"#python标识符\" class=\"headerlink\" title=\"python标识符\"></a>python标识符</h2><ul>\n<li>python中的标识符由字母(且区分大小写)、数字、下划线组成，但不能以数字开头。这一点和Java有点像，但是Java中还可以使用“$”。</li>\n<li>以下划线开头的标识符是有特殊意义的。以单下划线开头_foo的代表不能直接访问的类属性，需要类提供的接口进行访问，不能用from XXX import * 导入。</li>\n<li>以双下划线开头的__foo代表类的私有成员；以双下划线结尾的__foo__代表python里特殊方法专用的标识，如__init__()代表类的构造函数。<br>(本来个人理解“<em>”开头的标识符类似于Java中的私有变量，但是看到”\\</em>_“后就有些凌乱了……具体区别参考<a href=\"http://www.cnblogs.com/coder2012/p/4423356.html\" target=\"_blank\" rel=\"external\">python _、__和__xx__的区别</a>)</li>\n</ul>\n<h2 id=\"python保留字符\"><a href=\"#python保留字符\" class=\"headerlink\" title=\"python保留字符\"></a>python保留字符</h2><p>以下为python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。<br>所有 Python 的关键字只包含小写字母。<br>and        /    exec      /    not      / assert    /    finally     /     or<br>break    /   for      /        pass  /  class     /   from      /    print<br>continue    /  global     /   raise  /  def        /    if          /    return<br>del    /     import      /    try  /  elif     /    in          /    while<br>else    /    is          /    with  /  except     /   lambda      /    yield</p>\n<h2 id=\"行和缩进\"><a href=\"#行和缩进\" class=\"headerlink\" title=\"行和缩进\"></a>行和缩进</h2><p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量。</p>\n<h2 id=\"多行语句\"><a href=\"#多行语句\" class=\"headerlink\" title=\"多行语句\"></a>多行语句</h2><p>Python语句中一般以新行作为为语句的结束符。<br>但是我们可以使用斜杠（ \\）将一行的语句分为多行显示。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">total = item_one + \\</div><div class=\"line\">        item_two + \\</div><div class=\"line\">        item_three</div></pre></td></tr></table></figure></p>\n<p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">days = [&apos;Monday&apos;, &apos;Tuesday&apos;, &apos;Wednesday&apos;,</div><div class=\"line\">        &apos;Thursday&apos;, &apos;Friday&apos;]</div></pre></td></tr></table></figure></p>\n<h2 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h2><p>Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。<br>其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">word = &apos;word&apos;</div><div class=\"line\">sentence = &quot;这是一个句子。&quot;</div><div class=\"line\">paragraph = &quot;&quot;&quot;这是一个段落。</div><div class=\"line\">包含了多个语句&quot;&quot;&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"python注释\"><a href=\"#python注释\" class=\"headerlink\" title=\"python注释\"></a>python注释</h2><p>python中单行注释采用#开头。<br>注释可以在语句或表达式行末：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &quot;Eva&quot; # 这是一个注释</div></pre></td></tr></table></figure></p>\n<p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p>\n<h2 id=\"python空行\"><a href=\"#python空行\" class=\"headerlink\" title=\"python空行\"></a>python空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br>ps: 空行也是程序代码的一部分。</p>\n<h2 id=\"同一行显示多条语句\"><a href=\"#同一行显示多条语句\" class=\"headerlink\" title=\"同一行显示多条语句\"></a>同一行显示多条语句</h2><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割<br>为了使程序代码有良好的可读性，个人不建议一行写多条语句。</p>\n<h2 id=\"print输出\"><a href=\"#print输出\" class=\"headerlink\" title=\"print输出\"></a>print输出</h2><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=&quot;a&quot;</div><div class=\"line\">y=&quot;b&quot;</div><div class=\"line\"># 换行输出</div><div class=\"line\">print x</div><div class=\"line\">print y</div><div class=\"line\"># 不换行输出</div><div class=\"line\">print x,</div><div class=\"line\">print y,</div></pre></td></tr></table></figure></p>\n<h2 id=\"多个语句构成代码组\"><a href=\"#多个语句构成代码组\" class=\"headerlink\" title=\"多个语句构成代码组\"></a>多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。<br>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if expression : </div><div class=\"line\">   suite </div><div class=\"line\">elif expression :  </div><div class=\"line\">   suite  </div><div class=\"line\">else :  </div><div class=\"line\">   suite</div></pre></td></tr></table></figure></p>\n","categories":["python"],"tags":["python"]},{"title":"关于pip安装依赖包问题","url":"http://yoursite.com/2017/05/03/关于pip安装依赖包问题/","content":"<p>公司最近在开发一个Python项目，<br>当我在配置开发环境，使用pip安装依赖包时，出现了以下问题：<br><img src=\"/images/problem.jpg\" alt=\"problem\"></p>\n<p>试了很多遍，一直以为是网络的问题，因为Python之前有安装过，也可以使用<br>在命令行试了一下Python，可以识别<br>但是pip却识别不了<br>原因：计算机可能不知道pip装在哪里<br>因为之前我的Python默认安装路径很多都是隐藏的，找起来很麻烦<br>干脆就卸载了重新装了一下<br>然后再配一下两个环境变量：<br>F:\\program files\\python<br>F:\\program files\\python\\Scripts<br>注意：scripts下是pip的路径，这个我是在安装Python时一起安装的，如果之前没有装，就需要先装一下再配环境。<br>然后再命令行试pip<br><img src=\"/images/solved.jpg\" alt=\"solved\"><br>应该就是成功了，下面就可以安装自己需要的依赖包了~</p>\n","categories":["python"],"tags":["python"]},{"title":"about var","url":"http://yoursite.com/2017/04/25/about var/","content":"<h2 id=\"最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：\"><a href=\"#最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：\" class=\"headerlink\" title=\"最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：\"></a>最近遇到了一个关于var变量很简单的问题，废话不多说，直接看问题：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">\t<span class=\"keyword\">var</span> global = <span class=\"string\">'world'</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。\"><a href=\"#两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。\" class=\"headerlink\" title=\"两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。\"></a>两次打印，第一次undefined，第二次是world，笔者一直以为两次应该是hello和world，很是困扰。</h2><h2 id=\"如果把后面两行去掉：\"><a href=\"#如果把后面两行去掉：\" class=\"headerlink\" title=\"如果把后面两行去掉：\"></a>如果把后面两行去掉：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"这样子打印出来就是hello，那肯定是和后定义的变量有关系了。\"><a href=\"#这样子打印出来就是hello，那肯定是和后定义的变量有关系了。\" class=\"headerlink\" title=\"这样子打印出来就是hello，那肯定是和后定义的变量有关系了。\"></a>这样子打印出来就是hello，那肯定是和后定义的变量有关系了。</h2><h2 id=\"果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：\"><a href=\"#果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：\" class=\"headerlink\" title=\"果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：\"></a>果然，在网上查了一下，第二个var变量作用于整个function，个人理解也就是相当于：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> global;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">\tglobal = <span class=\"string\">'world'</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(global);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的\"><a href=\"#那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的\" class=\"headerlink\" title=\"那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的\"></a>那要是函数内有相同变量就不可以访问全局变量了吗，答案当然是否定的</h2><h2 id=\"在函数内可以通过window-global调用全局变量，\"><a href=\"#在函数内可以通过window-global调用全局变量，\" class=\"headerlink\" title=\"在函数内可以通过window.global调用全局变量，\"></a>在函数内可以通过window.global调用全局变量，</h2><h2 id=\"另外function内的this也是指向window实例，也可以吧引用写成this-global\"><a href=\"#另外function内的this也是指向window实例，也可以吧引用写成this-global\" class=\"headerlink\" title=\"另外function内的this也是指向window实例，也可以吧引用写成this.global\"></a>另外function内的this也是指向window实例，也可以吧引用写成this.global</h2><h2 id=\"当然最好还是尽量避免同名变量的出现，减少出错的概率。\"><a href=\"#当然最好还是尽量避免同名变量的出现，减少出错的概率。\" class=\"headerlink\" title=\"当然最好还是尽量避免同名变量的出现，减少出错的概率。\"></a>当然最好还是尽量避免同名变量的出现，减少出错的概率。</h2>","categories":["JS"],"tags":["Javascript"]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]